#!usr/bin/python
import unittest
import numpy as np

class Test(unittest.TestCase):

############################ zero element #######################################

        def test_entropy_given_zero_element_expected_nonemptyarray(self):
                se = SimpleEntropy()
                gridmap = []
                self.assertRaises(Exception, se.entropy, gridmap)

        def test_entropy_given_zero_element_expected_nonemptyarray(self):
                se = SimpleEntropy()
                gridmap = []
                self.assertRaises(Exception, se.cost, gridmap)

        def test_entropy_given_zero_element_expected_nonemptyarray(self):
                se = SimpleEntropy()
                gridmap = []
                self.assertRaises(Exception, se.gain, gridmap)

################################### 1D row #######################################                

        def test_given_1Drowvector_expected_multiDarray(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50]])
                self.assertRaises(Exception, se.entropy, gridmap)

        def test_given_1Drowvector_expected_multiDarray(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50]])
                self.assertRaises(Exception, se.cost, gridmap)

        def test_given_1Drowvector_expected_multiDarray(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50]])
                self.assertRaises(Exception, se.gain, gridmap)

########################### single element #######################################

        def test_given_single_element_expected_multiDarray(self):
                gridmap = np.array([80])
                self.assertRaises(Exception, se.entropy, gridmap)

        def test_given_single_element_expected_multiDarray(self):
                gridmap = np.array([80])
                self.assertRaises(Exception, se.cost, gridmap)

        def test_given_single_element_expected_multiDarray(self):
                gridmap = np.array([80])
                self.assertRaises(Exception, se.gain, gridmap)

################################### 1D col #######################################

        def test_given_1Dcolvector_expected_multiDarray(self):
                gridmap = np.array([[60], [72], [91], [50]])
                self.assertRaises(Exception, se.entropy, gridmap)

        def test_given_1Dcolvector_expected_multiDarray(self):
                gridmap = np.array([[60], [72], [91], [50]])
                self.assertRaises(Exception, se.cost, gridmap)

        def test_gain_given_1Dcolvector_expected_multiDarray(self):
                gridmap = np.array([[60], [72], [91], [50]])
                self.assertRaises(Exception, se.gain, gridmap)

################################### 4 x 4 #######################################

        def test_given_4x4array_expected_entropy(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50],
                                    [87, 47, 27, 66],
                                    [54, 99, 75, 22],
                                    [29, 52, 55, 83]])
                expectedEntropy = 1.5928348167
                self.assertEqual(expectedEntropy, se.entropy(gridmap))

        def test_given_4x4array_expected_cost(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50],
                                    [87, 47, 27, 66],
                                    [54, 99, 75, 22],
                                    [29, 52, 55, 83]])
                pose = (2,2)
                expectedCost = [[ 0,          1,          2,          3        ],
                             [ 1,          1.41421354,  2.23606801,  3.1622777 ],
                             [ 2,          2.23606801,  2.82842708,  3.60555124],
                             [ 3,          3.1622777,   3.60555124,  4.2426405 ]],
                self.assertEqual(expectedCost,se.cost(gridmap))

        def test_given_4x4array_expected_gain(self):
                se = SimpleEntropy()
                gridmap = np.array([[60, 72, 91, 50],
                                    [87, 47, 27, 66],
                                    [54, 99, 75, 22],
                                    [29, 52, 55, 83]])
                expectedGain = [[ 1.59283483  0.59283483 -0.40716517 -1.40716517]
                                [ 0.59283483  0.17862128 -0.64323318 -1.56944287]
                                [-0.40716517 -0.64323318 -1.23559225 -2.01271653]
                                [-1.40716517 -1.56944287 -2.01271653 -2.64980578]]
                self.assertEqual(expectedGain,se.gain(gridmap))

#################################### 2 x 2 #####################################

        def test_given_2x2array_expected_entropy(self):
                gridmap = np.array([[60, 72],
                                    [27, 66]])
                exceptedEntropy = 1.20089899748
                self.assertEqual(expectedGain,se.entropy(gridmap))

        def test_given_2x2array_expected_cost(self):
                gridmap = np.array([[60, 72],
                                    [27, 66]])
                exceptedCost = [[ 0.          1.        ]
                                [ 1.          1.41421354]]
                self.assertEqual(expectedGain,se.cost(gridmap))

        def test_given_2x2array_expected_gain(self):
                gridmap = np.array([[60, 72],
                                    [27, 66]])
                exceptedCost =  [[ 1.200899    0.20089899]
                                 [ 0.20089899 -0.21331455]]
                self.assertEqual(expectedGain,se.gain(gridmap))

#################################### 4 x 2 ########################################

        def test_given_4x2array_expected_entropy(self):
                gridmap = np.array([[99, 14],
                                    [14, 51],
                                    [81, 37],
                                    [24, 10]])
                expectedEntropy = 0.100000000014
                self.assertEqual(expectedEntropy,se.entropy(gridmap))

        def test_given_4x2array_expected_cost(self):
                gridmap = np.array([[99, 14],
                                    [14, 51],
                                    [81, 37],
                                    [24, 10]])
                expectedCost = np.array([[ 0.0,          1.0        ],
                                         [ 1.0,          1.41421354],
                                         [ 2.0,          2.23606801],
                                         [ 3.0,          3.1622777 ]])
                self.assertEqual(expectedCost,se.cost(gridmap))
        
        def test_given_4x2array_expected_gain(self):
                gridmap = np.array([[99, 14],
                                    [14, 51],
                                    [81, 37],
                                    [24, 10]])
                expectedGain = np.array([[ 0.1        -0.89999998],
                                         [-0.89999998 -1.31421351],
                                         [-1.89999998 -2.13606811],
                                         [-2.9000001  -3.06227779]])
                self.assertEqual(expectedGain,se.gain(gridmap))

#################################### 20 x 20 ########################################

        def test_given_20x20array_expected_entropy(self):
                gridmap = np.array([[92, 19, 63, 51, 21, 78, 35, 88, 10, 21, 59, 88, 96, 70, 95, 94, 18,
        57, 65, 72],
       [18, 88, 99,  6,  8, 70, 84, 89, 67, 61, 20, 25, 47, 68, 65, 42, 76,
        32, 39, 83],
       [54, 24, 45, 65, 65, 45, 43, 52, 97, 49, 88, 80, 55, 81, 71, 39, 26,
        66,  9, 30],
       [ 0, 20, 46,  9, 39, 29, 68, 10, 63, 85, 88, 57, 41, 47, 20,  7, 64,
        93, 85, 18],
       [59, 43, 63, 22, 66, 67, 80, 87, 14, 10, 38, 94, 51, 78, 70, 88, 87,
        51, 21, 38],
       [ 4, 39, 99, 51, 29,  3, 31, 46, 42, 46, 73,  1, 80, 52, 26, 63,  9,
        52, 31, 36],
       [22, 84, 97, 57, 14, 98, 16, 88, 85, 55, 43, 34, 30,  1, 51, 15,  3,
        30, 36, 70],
       [58, 73, 41, 70, 18,  4, 28, 69, 79, 31, 11, 54, 48, 24, 40, 38, 12,
        85, 86,  0],
       [35, 82,  0, 43, 29, 50, 31, 49, 16,  9, 71, 19, 12, 21, 84, 56, 59,
         9, 23, 69],
       [68, 78, 53, 94,  0, 94, 58, 13, 65, 83, 36, 95, 29, 42, 73, 92, 72,
        90, 41, 42],
       [63, 84, 74, 41, 32,  6, 94, 63, 62, 26, 88, 54, 87,  7, 51, 27, 55,
        16,  3, 72],
       [32,  0, 26, 35, 81, 45, 14, 76, 23, 80, 57, 71, 43, 99, 59, 41, 13,
        94, 66, 19],
       [ 3, 38,  5, 50, 81,  8, 69, 32,  5, 10, 38, 55, 47, 53, 71, 56, 43,
        94, 77, 21],
       [24, 81,  8, 74, 94, 58, 53, 29, 40, 13, 41, 32, 10, 17, 41, 25, 54,
         2, 22, 90],
       [13, 82, 94, 63, 43, 89, 68, 49, 45,  0, 64, 36, 46, 82, 70, 95, 47,
        31,  6, 20],
       [ 7, 99, 50, 20, 41, 59, 48,  1, 18, 37, 89, 36, 65, 59, 76, 99, 24,
        55, 84, 91],
       [13, 66, 78, 50, 70, 25, 40, 56, 71,  7, 28, 35, 66,  5, 60, 83, 73,
        27, 13, 34],
       [21, 58, 86, 80, 99, 60, 93, 84, 95, 39, 95, 37, 86, 35, 69, 69, 71,
        82, 20, 94],
       [90, 80, 53, 13, 87, 26, 71, 29, 11, 79, 18, 77,  2, 26, 80, 40, 44,
        59, 96, 50],
       [87, 87, 14, 51, 80, 29, 37,  3, 54, 10, 45, 14, 99, 12, 17, 11, 79,
        41, 34, 26]])
                expectedEntropy = 0.367893070491
                self.assertEqual(expectedEntropy,se.entropy(gridmap))

        def test_given_20x20array_expected_cost(self):
                gridmap = np.array([[92, 19, 63, 51, 21, 78, 35, 88, 10, 21, 59, 88, 96, 70, 95, 94, 18,
        57, 65, 72],
       [18, 88, 99,  6,  8, 70, 84, 89, 67, 61, 20, 25, 47, 68, 65, 42, 76,
        32, 39, 83],
       [54, 24, 45, 65, 65, 45, 43, 52, 97, 49, 88, 80, 55, 81, 71, 39, 26,
        66,  9, 30],
       [ 0, 20, 46,  9, 39, 29, 68, 10, 63, 85, 88, 57, 41, 47, 20,  7, 64,
        93, 85, 18],
       [59, 43, 63, 22, 66, 67, 80, 87, 14, 10, 38, 94, 51, 78, 70, 88, 87,
        51, 21, 38],
       [ 4, 39, 99, 51, 29,  3, 31, 46, 42, 46, 73,  1, 80, 52, 26, 63,  9,
        52, 31, 36],
       [22, 84, 97, 57, 14, 98, 16, 88, 85, 55, 43, 34, 30,  1, 51, 15,  3,
        30, 36, 70],
       [58, 73, 41, 70, 18,  4, 28, 69, 79, 31, 11, 54, 48, 24, 40, 38, 12,
        85, 86,  0],
       [35, 82,  0, 43, 29, 50, 31, 49, 16,  9, 71, 19, 12, 21, 84, 56, 59,
         9, 23, 69],
       [68, 78, 53, 94,  0, 94, 58, 13, 65, 83, 36, 95, 29, 42, 73, 92, 72,
        90, 41, 42],
       [63, 84, 74, 41, 32,  6, 94, 63, 62, 26, 88, 54, 87,  7, 51, 27, 55,
        16,  3, 72],
       [32,  0, 26, 35, 81, 45, 14, 76, 23, 80, 57, 71, 43, 99, 59, 41, 13,
        94, 66, 19],
       [ 3, 38,  5, 50, 81,  8, 69, 32,  5, 10, 38, 55, 47, 53, 71, 56, 43,
        94, 77, 21],
       [24, 81,  8, 74, 94, 58, 53, 29, 40, 13, 41, 32, 10, 17, 41, 25, 54,
         2, 22, 90],
       [13, 82, 94, 63, 43, 89, 68, 49, 45,  0, 64, 36, 46, 82, 70, 95, 47,
        31,  6, 20],
       [ 7, 99, 50, 20, 41, 59, 48,  1, 18, 37, 89, 36, 65, 59, 76, 99, 24,
        55, 84, 91],
       [13, 66, 78, 50, 70, 25, 40, 56, 71,  7, 28, 35, 66,  5, 60, 83, 73,
        27, 13, 34],
       [21, 58, 86, 80, 99, 60, 93, 84, 95, 39, 95, 37, 86, 35, 69, 69, 71,
        82, 20, 94],
       [90, 80, 53, 13, 87, 26, 71, 29, 11, 79, 18, 77,  2, 26, 80, 40, 44,
        59, 96, 50],
       [87, 87, 14, 51, 80, 29, 37,  3, 54, 10, 45, 14, 99, 12, 17, 11, 79,
        41, 34, 26]])

                expectedCost = [[  0.,           1.,           2.,           3.,           4.,           5.,
            6.,           7.,           8.,           9.,          10.,          11.,
           12.,          13.,          14.,          15.,          16.,          17.,
           18.,          19.,        ],
         [  1.,           1.41421354,   2.23606801,   3.1622777,    4.12310553,
            5.09901953,   6.08276272,   7.07106781,   8.06225777,   9.05538559,
           10.04987526,  11.04536057,  12.04159451,  13.03840446,  14.03566837,
           15.03329659,  16.03121948,  17.02938652,  18.02775574,  19.02629852],
         [  2.,           2.23606801,   2.82842708,   3.60555124,   4.47213602,
            5.38516474,   6.3245554,    7.28010988,   8.24621105,   9.21954441,
           10.19803905,  11.18033981,  12.16552544,  13.15294647,  14.14213562,
           15.13274574,  16.12451553 , 17.11724281,  18.11077118,  19.10497284],
         [  3.        ,   3.1622777  ,  3.60555124,   4.2426405 ,   5.,           5.83095169,
            6.70820379,   7.6157732   , 8.54400349,   9.48683262,  10.44030666,
           11.40175438,  12.36931705  ,13.34166431,  14.3178215 ,  15.29705811,
           16.27882004,  17.26267624  ,18.2482872 ,  19.23538399],
         [  4.        ,   4.12310553  , 4.47213602,   5.        ,   5.65685415,
            6.40312433,   7.21110249  , 8.06225777,   8.94427204,   9.84885788,
           10.77032948,  11.70469952  ,12.64911079,  13.60147095,  14.56021976,
           15.52417469,  16.4924221   ,17.46424866,  18.43908882,  19.41648865],
         [  5.        ,   5.09901953   ,5.38516474,   5.83095169 ,  6.40312433,
            7.07106781,   7.81024981   ,8.60232544,   9.43398094,  10.29563046,
           11.18033981,  12.08304596  ,13.        ,  13.9283886,   14.86606884,
           15.81138802,  16.76305389  ,17.72004509,  18.68154144,  19.64688301],
         [  6.        ,   6.08276272   ,6.3245554 ,   6.70820379,   7.21110249,
            7.81024981,   8.48528099   ,9.21954441,  10.       ,   10.81665421,
           11.66190338,  12.52996445  ,13.41640759,  14.3178215,   15.2315464,
           16.15549469,  17.08800697  ,18.02775574,  18.97366524,  19.92485809],
         [  7.        ,   7.07106781   ,7.28010988,   7.6157732 ,   8.06225777,
            8.60232544,   9.21954441   ,9.89949512,  10.63014603 , 11.40175438,
           12.20655537,  13.03840446  ,13.89244366,  14.76482296,  15.65247631,
           16.55294609,  17.46424866  ,18.38477707,  19.31320763,  20.24845695],
         [  8.        ,   8.06225777   ,8.24621105,   8.54400349,   8.94427204,
            9.43398094,  10.          ,10.63014603,  11.31370831,  12.04159451,
           12.80624866,  13.60147095  ,14.42220497,  15.26433754,  16.12451553 , 17.,
           17.88854408,  18.78829384  ,19.69771576,  20.61552811],
         [  9.        ,   9.05538559   ,9.21954441,   9.48683262,   9.84885788,
           10.29563046,  10.81665421  ,11.40175438,  12.04159451,  12.72792244,
           13.45362377,  14.21267033  ,15.        ,  15.81138802,  16.64331627,
           17.49285507,  18.3575592   ,19.23538399,  20.1246109 ,  21.02379608],
         [ 10.        ,  10.04987526  ,10.19803905,  10.44030666,  10.77032948,
           11.18033981,  11.66190338  ,12.20655537,  12.80624866,  13.45362377,
           14.14213562,  14.86606884  ,15.62049961,  16.40122032,  17.20465088,
           18.02775574,  18.86796188  ,19.7230835 ,  20.59126091,  21.47091103],
         [ 11.        ,  11.04536057  ,11.18033981,  11.40175438,  11.70469952,
           12.08304596,  12.52996445  ,13.03840446,  13.60147095,  14.21267033,
           14.86606884,  15.5563488   ,16.27882004,  17.02938652,  17.80449295,
           18.60107613,  19.41648865  ,20.24845695,  21.0950222 ,  21.95449829],
         [ 12.        ,  12.04159451  ,12.16552544 , 12.36931705,  12.64911079 , 13.,
           13.41640759,  13.89244366  ,14.42220497,  15.        ,  15.62049961,
           16.27882004,  16.97056198  ,17.69180679,  18.43908882,  19.20937347,  20.,
           20.80865288,  21.63330841  ,22.47220421],
         [ 13.        ,  13.03840446  ,13.15294647,  13.34166431,  13.60147095,
           13.9283886 ,  14.3178215   ,14.76482296,  15.26433754,  15.81138802,
           16.40122032,  17.02938652  ,17.69180679,  18.38477707,  19.10497284,
           19.8494339 ,  20.61552811  ,21.40093422,  22.20360374,  23.02172852],
         [ 14.        ,  14.03566837  ,14.14213562,  14.3178215 ,  14.56021976,
           14.86606884,  15.2315464   ,15.65247631,  16.12451553,  16.64331627,
           17.20465088,  17.80449295  ,18.43908882,  19.10497284,  19.79899025,
           20.51828384,  21.26029205  ,22.02271461,  22.80350876,  23.60084724],
         [ 15.        ,  15.03329659  ,15.13274574,  15.29705811,  15.52417469,
           15.81138802,  16.15549469  ,16.55294609,  17.        ,  17.49285507,
           18.02775574,  18.60107613  ,19.20937347,  19.8494339 ,  20.51828384,
           21.21320343,  21.9317131   ,22.67156792,  23.43074989,  24.20743752],
         [ 16.        ,  16.03121948  ,16.12451553,  16.27882004,  16.4924221,
           16.76305389,  17.08800697  ,17.46424866,  17.88854408,  18.3575592,
           18.86796188,  19.41648865  ,20.        ,  20.61552811,  21.26029205,
           21.9317131 ,  22.62741661  ,23.34523582,  24.08318901,  24.83948517],
         [ 17.        ,  17.02938652  ,17.11724281,  17.26267624,  17.46424866,
           17.72004509,  18.02775574  ,18.38477707,  18.78829384,  19.23538399,
           19.7230835 ,  20.24845695  ,20.80865288,  21.40093422,  22.02271461,
           22.67156792,  23.34523582  ,24.04162979,  24.75883675,  25.49509811],
         [ 18.        ,  18.02775574  ,18.11077118,  18.2482872 ,  18.43908882,
           18.68154144,  18.97366524  ,19.31320763,  19.69771576,  20.1246109,
           20.59126091,  21.0950222   ,21.63330841,  22.20360374,  22.80350876,
           23.43074989,  24.08318901  ,24.75883675,  25.45584488,  26.17250443],
         [ 19.        ,  19.02629852  ,19.10497284,  19.23538399,  19.41648865,
           19.64688301,  19.92485809  ,20.24845695,  20.61552811,  21.02379608,
           21.47091103,  21.95449829  ,22.47220421,  23.02172852,  23.60084724,
           24.20743752,  24.83948517  ,25.49509811,  26.17250443,  26.87005806]]

                self.assertEqual(expectedEntropy,se.cost(gridmap))

        def test_given_20x20array_expected_cost(self):
                gridmap = np.array([[92, 19, 63, 51, 21, 78, 35, 88, 10, 21, 59, 88, 96, 70, 95, 94, 18,
                57, 65, 72],
               [18, 88, 99,  6,  8, 70, 84, 89, 67, 61, 20, 25, 47, 68, 65, 42, 76,
                32, 39, 83],
               [54, 24, 45, 65, 65, 45, 43, 52, 97, 49, 88, 80, 55, 81, 71, 39, 26,
                66,  9, 30],
               [ 0, 20, 46,  9, 39, 29, 68, 10, 63, 85, 88, 57, 41, 47, 20,  7, 64,
                93, 85, 18],
               [59, 43, 63, 22, 66, 67, 80, 87, 14, 10, 38, 94, 51, 78, 70, 88, 87,
                51, 21, 38],
               [ 4, 39, 99, 51, 29,  3, 31, 46, 42, 46, 73,  1, 80, 52, 26, 63,  9,
                52, 31, 36],
               [22, 84, 97, 57, 14, 98, 16, 88, 85, 55, 43, 34, 30,  1, 51, 15,  3,
                30, 36, 70],
               [58, 73, 41, 70, 18,  4, 28, 69, 79, 31, 11, 54, 48, 24, 40, 38, 12,
                85, 86,  0],
               [35, 82,  0, 43, 29, 50, 31, 49, 16,  9, 71, 19, 12, 21, 84, 56, 59,
                 9, 23, 69],
               [68, 78, 53, 94,  0, 94, 58, 13, 65, 83, 36, 95, 29, 42, 73, 92, 72,
                90, 41, 42],
               [63, 84, 74, 41, 32,  6, 94, 63, 62, 26, 88, 54, 87,  7, 51, 27, 55,
                16,  3, 72],
               [32,  0, 26, 35, 81, 45, 14, 76, 23, 80, 57, 71, 43, 99, 59, 41, 13,
                94, 66, 19],
               [ 3, 38,  5, 50, 81,  8, 69, 32,  5, 10, 38, 55, 47, 53, 71, 56, 43,
                94, 77, 21],
               [24, 81,  8, 74, 94, 58, 53, 29, 40, 13, 41, 32, 10, 17, 41, 25, 54,
                 2, 22, 90],
               [13, 82, 94, 63, 43, 89, 68, 49, 45,  0, 64, 36, 46, 82, 70, 95, 47,
                31,  6, 20],
               [ 7, 99, 50, 20, 41, 59, 48,  1, 18, 37, 89, 36, 65, 59, 76, 99, 24,
                55, 84, 91],
               [13, 66, 78, 50, 70, 25, 40, 56, 71,  7, 28, 35, 66,  5, 60, 83, 73,
                27, 13, 34],
               [21, 58, 86, 80, 99, 60, 93, 84, 95, 39, 95, 37, 86, 35, 69, 69, 71,
                82, 20, 94],
               [90, 80, 53, 13, 87, 26, 71, 29, 11, 79, 18, 77,  2, 26, 80, 40, 44,
                59, 96, 50],
               [87, 87, 14, 51, 80, 29, 37,  3, 54, 10, 45, 14, 99, 12, 17, 11, 79,
                41, 34, 26]]) 

                expectedGain = np.array([[  0.36789307  -0.6321069   -1.6321069   -2.63210702  -3.63210702
                -4.63210678  -5.63210678  -6.63210678  -7.63210678  -8.63210678
                -9.63210678 -10.63210678 -11.63210678 -12.63210678 -13.63210678
                -14.63210678 -15.63210678 -16.63210678 -17.63210678 -18.63210678]
                [ -0.6321069   -1.04632044  -1.86817491  -2.79438472  -3.75521255
                -4.73112631  -5.7148695   -6.70317459  -7.69436455  -8.68749237
                -9.68198204 -10.67746735 -11.67370129 -12.67051125 -13.66777515
                -14.66540337 -15.66332626 -16.6614933  -17.65986252 -18.6584053 ]
                [ -1.6321069   -1.86817491  -2.4605341   -3.23765826  -4.1042428
                -5.01727152  -5.95666218  -6.91221666  -7.87831783  -8.85165119
                -9.83014584 -10.81244659 -11.79763222 -12.78505325 -13.7742424
                -14.76485252 -15.75662231 -16.74934959 -17.74287796 -18.73707962]
                [ -2.63210702  -2.79438472  -3.23765826  -3.87474751  -4.63210678
                -5.46305847  -6.34031057  -7.24787998  -8.17611027  -9.1189394
                -10.07241344 -11.03386116 -12.00142384 -12.9737711  -13.94992828
                -14.92916489 -15.91092682 -16.89478302 -17.88039398 -18.86749077]
                [ -3.63210702  -3.75521255  -4.1042428   -4.63210678  -5.28896093
                -6.03523111  -6.84320927  -7.69436455  -8.57637882  -9.48096466
                -10.40243626 -11.3368063  -12.28121758 -13.23357773 -14.19232655
                -15.15628147 -16.12452888 -17.09635544 -18.0711956  -19.04859543]
                [ -4.63210678  -4.73112631  -5.01727152  -5.46305847  -6.03523111
                -6.70317459  -7.44235659  -8.23443222  -9.06608772  -9.92773724
                -10.81244659 -11.71515274 -12.63210678 -13.56049538 -14.49817562
                -15.4434948  -16.39516068 -17.35215187 -18.31364822 -19.27898979]
                [ -5.63210678  -5.7148695   -5.95666218  -6.34031057  -6.84320927
                -7.44235659  -8.11738777  -8.85165119  -9.63210678 -10.44876099
                -11.29401016 -12.16207123 -13.04851437 -13.94992828 -14.86365318
                -15.78760147 -16.72011375 -17.65986252 -18.60577202 -19.55696487]       
                [ -6.63210678  -6.70317459  -6.91221666  -7.24787998  -7.69436455
                -8.23443222  -8.85165119  -9.53160191 -10.26225281 -11.03386116
                -11.83866215 -12.67051125 -13.52455044 -14.39692974 -15.28458309
                -16.18505287 -17.09635544 -18.01688385 -18.94531441 -19.88056374]
                [ -7.63210678  -7.69436455  -7.87831783  -8.17611027  -8.57637882
                -9.06608772  -9.63210678 -10.26225281 -10.94581509 -11.67370129
                -12.43835545 -13.23357773 -14.05431175 -14.89644432 -15.75662231
                -16.63210678 -17.52065086 -18.42040062 -19.32982254 -20.24763489]
                [ -8.63210678  -8.68749237  -8.85165119  -9.1189394   -9.48096466
                -9.92773724 -10.44876099 -11.03386116 -11.67370129 -12.36002922
                -13.08573055 -13.84477711 -14.63210678 -15.4434948  -16.27542305
                -17.12496185 -17.98966599 -18.86749077 -19.75671768 -20.65590286]
                [ -9.63210678  -9.68198204  -9.83014584 -10.07241344 -10.40243626
                -10.81244659 -11.29401016 -11.83866215 -12.43835545 -13.08573055
                -13.7742424  -14.49817562 -15.25260639 -16.0333271  -16.83675766
                -17.65986252 -18.50006866 -19.35519028 -20.22336769 -21.10301781]
                [-10.63210678 -10.67746735 -10.81244659 -11.03386116 -11.3368063
                -11.71515274 -12.16207123 -12.67051125 -13.23357773 -13.84477711
                -14.49817562 -15.18845558 -15.91092682 -16.6614933  -17.43659973
                -18.23318291 -19.04859543 -19.88056374 -20.72712898 -21.58660507]
                [-11.63210678 -11.67370129 -11.79763222 -12.00142384 -12.28121758
                -12.63210678 -13.04851437 -13.52455044 -14.05431175 -14.63210678
                -15.25260639 -15.91092682 -16.60266876 -17.32391357 -18.0711956
                -18.84148026 -19.63210678 -20.44075966 -21.26541519 -22.10431099]
                [-12.63210678 -12.67051125 -12.78505325 -12.9737711  -13.23357773
                -13.56049538 -13.94992828 -14.39692974 -14.89644432 -15.4434948
                -16.0333271  -16.6614933  -17.32391357 -18.01688385 -18.73707962
                -19.48154068 -20.24763489 -21.033041   -21.83571053 -22.6538353 ]
                [-13.63210678 -13.66777515 -13.7742424  -13.94992828 -14.19232655
                -14.49817562 -14.86365318 -15.28458309 -15.75662231 -16.27542305
                -16.83675766 -17.43659973 -18.0711956  -18.73707962 -19.43109703
                -20.15039062 -20.89239883 -21.6548214  -22.43561554 -23.23295403]
                [-14.63210678 -14.66540337 -14.76485252 -14.92916489 -15.15628147
                -15.4434948  -15.78760147 -16.18505287 -16.63210678 -17.12496185
                -17.65986252 -18.23318291 -18.84148026 -19.48154068 -20.15039062
                  -20.84531021 -21.56381989 -22.3036747  -23.06285667 -23.8395443 ]
                 [-15.63210678 -15.66332626 -15.75662231 -15.91092682 -16.12452888
                  -16.39516068 -16.72011375 -17.09635544 -17.52065086 -17.98966599
                  -18.50006866 -19.04859543 -19.63210678 -20.24763489 -20.89239883
                  -21.56381989 -22.25952339 -22.97734261 -23.71529579 -24.47159195]
                 [-16.63210678 -16.6614933  -16.74934959 -16.89478302 -17.09635544
                  -17.35215187 -17.65986252 -18.01688385 -18.42040062 -18.86749077
                  -19.35519028 -19.88056374 -20.44075966 -21.033041   -21.6548214
                  -22.3036747  -22.97734261 -23.67373657 -24.39094353 -25.1272049 ]
                 [-17.63210678 -17.65986252 -17.74287796 -17.88039398 -18.0711956
                  -18.31364822 -18.60577202 -18.94531441 -19.32982254 -19.75671768
                  -20.22336769 -20.72712898 -21.26541519 -21.83571053 -22.43561554
                  -23.06285667 -23.71529579 -24.39094353 -25.08795166 -25.80461121]
                 [-18.63210678 -18.6584053  -18.73707962 -18.86749077 -19.04859543
                  -19.27898979 -19.55696487 -19.88056374 -20.24763489 -20.65590286
                  -21.10301781 -21.58660507 -22.10431099 -22.6538353  -23.23295403
                  -23.8395443  -24.47159195 -25.1272049  -25.80461121 -26.50216484]])

                self.assertEqual(expectedGain,se.gain(gridmap))

if __name__ == '__main__':
    unittest.main()